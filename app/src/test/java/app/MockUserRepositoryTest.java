/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import org.junit.jupiter.api.Test;

import repositories.userRepository.MockUserRepository;
import models.User;
import models.Customer;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;

class MockUserRepositoryTest {
	
	private MockUserRepository userRepository;
	
	
	@BeforeEach
    public void setUp() {
        userRepository = new MockUserRepository();
    }
	
	// Test cases for MockUserRepository
    @Test
    public void testCreateUser() {
        User newUser = new Customer("Test", "User", "testuser", "testpassword");
        userRepository.createUser(newUser);
        User retrievedUser = userRepository.getUserByUsername("testuser");
        assertNotNull(retrievedUser);
        assertEquals("Test", retrievedUser.getFirstName());
        assertEquals("User", retrievedUser.getLastName());
        assertEquals("testuser", retrievedUser.getUsername());
        assertEquals("testpassword", retrievedUser.getPassword());
    }

    @Test
    public void testDeleteUser() {
        userRepository.deleteUser("johndoes");
        assertNull(userRepository.getUserByUsername("johndoes"));
    }

    @Test
    public void testUpdateUser() {
        User existingUser = userRepository.getUserByUsername("johndoes");
        existingUser.setFirstName("Updated");
        existingUser.setLastName("Name");
        existingUser.setPassword("updatedpassword");
        userRepository.updateUser(existingUser, "Farmer");
        User updatedUser = userRepository.getUserByUsername("johndoes");
        assertEquals("Updated", updatedUser.getFirstName());
        assertEquals("Name", updatedUser.getLastName());
        assertEquals("updatedpassword", updatedUser.getPassword());
    }

    @Test
    public void testGetUserById() {
        User user = userRepository.getUserById(1);
        assertNotNull(user);
        assertEquals(1, user.getId());
        assertEquals("John", user.getFirstName());
        assertEquals("Doe", user.getLastName());
        assertEquals("johndoes", user.getUsername());
        assertEquals("password123", user.getPassword());
    }

    @Test
    public void testGetUserByUsername() {
        User user = userRepository.getUserByUsername("janedoes");
        assertNotNull(user);
        assertEquals("Jane", user.getFirstName());
        assertEquals("Doe", user.getLastName());
        assertEquals("janedoes", user.getUsername());
        assertEquals("password456", user.getPassword());
    }

    @Test
    public void testValidateUser() {
        User validUser = userRepository.validateUser("janedoes", "password456");
        assertNotNull(validUser);
        assertEquals("Jane", validUser.getFirstName());
        assertEquals("Doe", validUser.getLastName());
        assertEquals("janedoes", validUser.getUsername());
        assertEquals("password456", validUser.getPassword());

        User invalidUser = userRepository.validateUser("janedoes", "wrongpassword");
        assertNull(invalidUser);
    }
}
